library(ebirdst)
library(viridis)
library(raster)
library(sf)
library(rnaturalearth)
library(rnaturalearth)
library(ebirdst)
library(viridis)
library(raster)
library(sf)
library(rnaturalearth)
ebirdst_runs
a <- ebirdst_runs
View(a)
write.table(a, "T:/Temp/ebirdruns.csv")
write.table?
jj
?write.table
write.table(a, "T:/Temp/ebirdruns.csv", sep=",")
write.csv(a, "T:/Temp/ebirdruns.csv", sep=",")
write.csv(a, "T:/Temp/ebirdruns.csv")
write.csv(a, "T:/Temp/ebirdruns.csv", row.names = FALSE)
write.csv(a, "T:/NCBA/Species_List/ebirdst_runs.csv", row.names = FALSE)
source('T:/Code/NCBA/ebirdst_test.R')
library(ebirdst)
library(viridis)
library(raster)
library(sf)
library(rnaturalearth)
# download data
# download a simplified example dataset from aws s3
# example data are for yellow-bellied sapsucker in michigan
# by default files will be stored in a persistent data directory:
# rappdirs::user_data_dir("ebirdst"))
sp_path <- ebirdst_download(species = "example_data")
# load estimated relative abundance and label with dates
# this raster stack has 52 layers, one for each week of the year
abunds <- load_raster("abundance", path = sp_path)
# use parse_raster_dates() to get actual date objects for each layer
date_vector <- parse_raster_dates(abunds)
print(date_vector)
#>  [1] "2018-01-04" "2018-01-11" "2018-01-18" "2018-01-25" "2018-02-01" "2018-02-08" "2018-02-15" "2018-02-22" "2018-03-01"
#> [10] "2018-03-08" "2018-03-15" "2018-03-22" "2018-03-29" "2018-04-05" "2018-04-12" "2018-04-19" "2018-04-26" "2018-05-03"
#> [19] "2018-05-10" "2018-05-17" "2018-05-24" "2018-05-31" "2018-06-07" "2018-06-14" "2018-06-21" "2018-06-28" "2018-07-06"
#> [28] "2018-07-13" "2018-07-20" "2018-07-27" "2018-08-03" "2018-08-10" "2018-08-17" "2018-08-24" "2018-08-31" "2018-09-07"
#> [37] "2018-09-14" "2018-09-21" "2018-09-28" "2018-10-05" "2018-10-12" "2018-10-19" "2018-10-26" "2018-11-02" "2018-11-09"
#> [46] "2018-11-16" "2018-11-23" "2018-11-30" "2018-12-07" "2018-12-14" "2018-12-21" "2018-12-28"
# select a week in the summer
abund <- abunds[[26]]
rm(abunds)
# project to mollweide for mapping
# the nearest neighbor method preserves cell values across projections
mollweide <- "+proj=moll +lon_0=-90 +x_0=0 +y_0=0 +ellps=WGS84"
abund_moll <- projectRaster(abund, crs = mollweide, method = "ngb")
# get reference data from the rnaturalearth package
# the example data currently shows only the US state of Michigan
wh_states <- ne_states(country = c("United States of America", "Canada"),
returnclass = "sf") %>%
st_transform(crs = mollweide) %>%
st_geometry()
# calculate ideal color bins for abundance values for this week
week_bins <- calc_bins(abund_moll)
# start plotting
par(mfrow = c(1, 1), mar = c(0, 0, 0, 6))
# use raster bounding box to set the spatial extent for the plot
bb <- st_as_sfc(st_bbox(trim(abund_moll)))
plot(bb, col = "white", border = "white")
# add background reference data
plot(wh_states, col = "#eeeeee", border = NA, add = TRUE)
# plot zeroes as gray
plot(abund_moll == 0, col = "#dddddd",
maxpixels = ncell(abund_moll),
axes = FALSE, legend = FALSE, add = TRUE)
# define color bins
qcol <- abundance_palette(length(week_bins$bins) - 1, "weekly")
# plot abundances
plot(abund_moll, col = qcol, breaks = week_bins$bins,
maxpixels = ncell(abund_moll),
axes = FALSE, legend = FALSE, add = TRUE)
# for legend, create a smaller set of bin labels
bin_labels <- format(round(week_bins$bins, 2), nsmall = 2)
bin_labels[!(bin_labels %in% c(bin_labels[1],
bin_labels[round((length(bin_labels) / 2)) + 1],
bin_labels[length(bin_labels)]))] <- ""
bin_labels <- c("0", bin_labels)
# create colors that include gray for 0
lcol <- c("#dddddd", qcol)
# set legend such that color ramp appears linearly
ltq <- seq(from = week_bins$bins[1], to = week_bins$bins[length(week_bins$bins)],
length.out = length(week_bins$bins))
ltq <- c(0, ltq)
# plot legend
plot(abund_moll ^ week_bins$power, legend.only = TRUE,
col = lcol,
breaks = ltq ^ week_bins$power,
lab.breaks = bin_labels, legend.shrink = 0.97,
legend.width = 2, axis.args = list(cex.axis = 0.9, lwd.ticks = 0))
# add state boundaries on top
plot(st_geometry(wh_states), add = TRUE, col = NA, border = "white", lwd = 1.5)
# download data
# download a simplified example dataset from aws s3
# example data are for yellow-bellied sapsucker in michigan
# by default files will be stored in a persistent data directory:
# rappdirs::user_data_dir("ebirdst"))
sp_path <- ebirdst_download(species = "example_data")
abunds <- load_raster("abundance", path = sp_path)
date_vector <- parse_raster_dates(abunds)
print(date_vector)
projDir -> 'T:/NCBA/Species_list/'
home -> 'T:/NCBA/Species_list/'
home -> "T:/NCBA/Species_list/"
home -> "T:\NCBA\Species_list\"
home -> 'T:/NCBA/Species_list/'
home = 'T:/NCBA/Species_list/'
gap <- read.csv(past(home,'Gap_birds_NC.csv'))
gap <- read.csv(paste(home,'Gap_birds_NC.csv'))
gap <- read.csv(paste(home,'Gap_birds_NC.csv', sep=""))
View(gap)
# eBird
ebirdst -> read.csv(paste(projDir,'ebirdst_runs.csv', sep=""))
# NCBA
NCBA -> read.csv(paste(projDir,'NCBA_species.csv', sep=""))
ebirdst <- read.csv(paste(projDir,'ebirdst_runs.csv', sep=""))
projDir = 'T:/NCBA/Species_list/'
# GAP
gap <- read.csv(paste(projDir,'Gap_birds_NC.csv', sep=""))
# eBird
ebirdst <- read.csv(paste(projDir,'ebirdst_runs.csv', sep=""))
# NCBA
NCBA <- read.csv(paste(projDir,'NCBA_species.csv', sep=""))
source('T:/Code/NCBA/join_species_lists.R')
ncba-ebird <- merge(NCBA, ebirdst, by.x="AOS59 Scientific Name", by.y="scientific_name")
library(tidyverse)
r.version
r
R.version()
r.version()
source('T:/Code/NCBA/join_species_lists.R')
ncebirdst <- NCBA %>%
left_join(ebirdst, c("AOS59.Scientific.Name" = "scientific_name")) %>%
mutate(ebirdst = case_when(is.na(run_name) == FALSE ~ 1))
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/join_species_lists.R')
names(NCBA)
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/join_species_lists.R')
library(tidyverse)
################################# Load the various species lists
################################################################
projDir = 'T:/NCBA/Species_list/'
# GAP
gap <- read.csv(paste(projDir,'Gap_birds_NC.csv', sep=""))
View(gap)
# eBird
ebirdst <- read.csv(paste(projDir,'ebirdst_runs.csv', sep=""))
View(ebirdst)
# NCBA
NCBA <- read.csv(paste(projDir,'NCBA_species.csv', sep=""))
View(NCBA)
# Get a dataframe of all NCBA species and a column denoting if there is
# an ebird-st run.
ncebirdst <- NCBA %>%
left_join(ebirdst, c("AOS59.Scientific.Name" = "scientific_name")) %>%
mutate(ebirdst = case_when(is.na(run_name) == FALSE ~ 1)) %>%
select(Common.Name, ebirdst)
write.csv(ncebirdst, file='T:/NCBA/Species_List/ncba-ebirdsted.csv')
GAPnonBA <- gap %>%
left_join(NCBA, c("GAP_common_name", "Common.Name")) %>%
select("GAP_common_name", "Common.Name")
GAPnonBA <- gap %>%
left_join(NCBA, c("GAP_common_name" = "Common.Name")) %>%
select("GAP_common_name", "Common.Name")
View(GAPnonBA)
GAPnonBA <- gap %>%
left_join(NCBA, c("GAP_common_name" = "Common.Name")) %>%
select("GAP_common_name", "Common.Name")
GAPnonBA <- gap %>%
left_join(NCBA, c("GAP_common_name" = "Common.Name"))
View(GAPnonBA)
names(GAPnonBA)
GAPnonBA <- gap %>%
left_join(NCBA, c("GAP_common_name" = "Common.Name"))%>%
select("GAP_common_name", "GAP_scientific_name", "AOS59.Scientific.Name")
View(GAPnonBA)
GAPnonBA <- gap %>%
outer_join(NCBA, c("GAP_common_name" = "Common.Name"))%>%
select("GAP_common_name", "GAP_scientific_name", "AOS59.Scientific.Name")
View(GAPnonBA)
GAPnonBA <- gap %>%
outer_join(NCBA, c("GAP_common_name" = "Common.Name"))
GAPnonBA <- gap %>%
full_join(NCBA, c("GAP_common_name" = "Common.Name"))
View(GAPnonBA)
names(GAPnonBA)
GAPnonBA <- gap %>%
full_join(NCBA, c("GAP_common_name" = "Common.Name")) %>%
select("GAP_common_name", "GAP_scientific_name", "AOS59.Scientific.Name", "AOS57.Scientific.Name")
View(GAPnonBA)
source('T:/Code/NCBA/join_species_lists.R')
source('T:/Code/NCBA/get_ebird_seasons.r')
seasons.names
names(seasons)
head(NCBA)
seasons <- NCBA %>%
left_join(ebirdst, c("AOS59.Scientific.Name" = "scientific_name")) %>%
mutate(NCBA_common_name = Common.Name) %>%
select("NCBA_common_name", "breeding_start_dt", "breeding_end_dt",
"nonbreeding_start_dt", "nonbreeding_end_dt",
"postbreeding_migration_start_dt",
"postbreeding_migration_end_dt", "prebreeding_migration_start_dt",
"prebreeding_migration_end_dt", "year_round_start_dt",
"year_round_end_dt")
# Reformat data so that year is removed from values.
nrows(seasons)
nrow(seasons)
names(seasons)
head(seasons)
str(seasons)
2018-08-24
2018-08-24
print(2018-08-24)
library(lubridate)
2018-08-24
ymd(2018-08-24)
ymd("2018-08-24")
t <- ymd("2018-08-24")
t
md(t)
mdy(t)
month(t)
day(t)
monthday(t)
lubridate?
;j
?lubridate
mday(t)
month
month(t)
day(t)
month(seasons)
library(tidyverse)
library(ebirdst)
library(lubridate)
# Set paths and variables
projDir = 'T:/NCBA/Species_list/'
# Read in species list of NCBA
NCBA <- read.csv(paste(projDir,'NCBA_species.csv', sep=""))
View(NCBA)
eBird <- ebirdst_runs
View(eBird)
source('T:/code/NCBA/get_ebird_seasons_20200403NT.R')
source('T:/code/NCBA/get_ebird_seasons_20200403NT.R')
"
Created by N. Tarr on April 3, 2020.
Creates a table (.csv) list of NCBA species with breeding season
boundaries from eBird status and trends.
"
library(tidyverse)
library(ebirdst)
library(lubridate)
# Set paths and variables
projDir = 'T:/NCBA/Species_list/'
# Read in species list of NCBA
NCBA <- read.csv(paste(projDir,'NCBA_species.csv', sep=""))
# Read in season boundaries tables from eBird status and trends
ebirdst <- ebirdst_runs
# Combine NCBA species dataframe with ebird runs
#
seasons <- NCBA %>%
left_join(ebirdst, c("AOS59.Scientific.Name" = "scientific_name")) %>%
mutate(NCBA_common_name = Common.Name) %>%
select("NCBA_common_name", "breeding_start_dt", "breeding_end_dt",
"nonbreeding_start_dt", "nonbreeding_end_dt",
"postbreeding_migration_start_dt",
"postbreeding_migration_end_dt", "prebreeding_migration_start_dt",
"prebreeding_migration_end_dt", "year_round_start_dt",
"year_round_end_dt")
View(seasons)
str(seasons)
nrows(seasons)
nrow(seasons)
View(NCBA)
"
Created by N. Tarr on April 3, 2020.
Creates a table (.csv) list of NCBA species with breeding season
boundaries from eBird status and trends.
"
library(tidyverse)
library(ebirdst)
library(lubridate)
# Set paths and variables
projDir = 'T:/NCBA/Species_list/'
# Read in species list of NCBA
NCBA <- read.csv(paste(projDir,'NCBA_species.csv', sep=""))
# Read in season boundaries tables from eBird status and trends
ebirdst <- ebirdst_runs
# Combine NCBA species dataframe with ebird runs
seasons <- NCBA %>%
full_join(ebirdst, c("AOS59.Scientific.Name" = "scientific_name")) %>%
# Rename a column
mutate(NCBA_common_name = Common.Name) %>%
# Remove unwanted columns
select("NCBA_common_name", "breeding_start_dt", "breeding_end_dt",
"nonbreeding_start_dt", "nonbreeding_end_dt",
"postbreeding_migration_start_dt",
"postbreeding_migration_end_dt", "prebreeding_migration_start_dt",
"prebreeding_migration_end_dt", "year_round_start_dt",
"year_round_end_dt")
View(seasons)
library(stringr)
s1 <- "this is a string"
s1
s1[:3]
a <- str_c("a", "b", "x")
a
a <- str_c("a", "b", "x", sep="*")
a
x <- c("abc", NA)
x <- c("abc", NA)
str_c("|-", x, "-|")
str_c()
clear
str_c("prefix-", c("a", "b", "c"), "-suffix")
x <- c("Apple", "Banana", "Pear")
x
str_sub(x, 1, 2)
x
str_sub(x, 1,3) <- str_to_upper(str_sub(x, 1, 3))
x
name = "Golden-Crowned Kinglet"
name
x
str_view(x, "an")
str_view(x, "an")
str_view(x, "A")
str_view(x, ".a.")
source('~/.active-rstudio-document')
install.packages("auk")
auk_set_ebd_path("/TARR64GB/ebd_US_relAug-2019.tar", overwrite=False)
